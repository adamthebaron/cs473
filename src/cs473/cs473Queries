    /**
     * DONE
     * Returns all flights between the two airports on a given date. Note that I have simplified this from the
     * original requirements that specified a date range.  This function returns a generic Object so you can return
     * any object type that makes sense for your data model. The class your return should override the toString() method
     * and print something useful. Look at the sample Airline object for an example of this.
     */
     db.FlightQuery.find(
        { $and: [
            { "fromAirport" : },
            { "toAirport" : },
            { "dayOfWeek" : }
        ]}
        ).pretty()


    /**
     * DONE
     * Returns all flights that are overbooked on the given day at the airport in question. If the boolean
     * checkOriginationCity is true, then you should check flights leaving the airport on the day. If the value is
     * false then you should check flight arriving at the airport that day. I have simplified this to a single date
     * instead of a date range.
     */
     db.Reservation.aggregate([
             { $match: {
                 dayOfWeek: 1
               }
             },
             {
               $lookup: {
                 from: "FlightQuery",
                 localField: "flight",
                 foreignField: "_id",
                 as: "flightdata"
               }
             },
             { $match: {
                 "flightdata.fromAirport": "ONP"
               }
             },
             { $group: {
                 _id: "$flight",
                 numOfReservations: { $sum: 1 }
               }
             },
             { $project: {
                 overbooked: {
                     $gt: ["$flight.seats", "$numOfReservations"]
                 }
               }
             }
          ])

    /**
     * DONE
     * Returns the airport code of the airport with the highest demand on the given date. Note that this clarifies
     * the original requirements and should return an individual airport and not a city, which may have multiple
     * airports. This also limits the require to only a date and not a day or week.
     *
     * Demand is to be calculated as the percentage of possible seats originating at the airport that are sold.
     */
     db.Reservation.aggregate([
       { $match: {
           dayOfWeek: 1
         }
       },
       { $group: {
           _id: "$flight",
           reservations: {
             $push: { _id: "$_id" }
           }
         }
       },
       { $project: {
           flight: "$_id",
           Reservations: {$size: "$reservations"}
         }
       },
       { $lookup: {
           from: "FlightQuery",
           localField: "flight",
           foreignField: "_id",
           as: "flight_info"
         }
       },
       {
        $unwind: "$flight_info"
       },
       { $project: {
          reservations: "$Reservations",
          seats: "$flight_info.seats",
          flight: "$flight"
         }
       },
       { $project: {
           demand: {
              $divide: ["$reservations", "$seats"]
           }
         }
       },
       { $project: {
           demand: {
               $multiply: ["$demand", 100]
           }
         }
       },
       {
        $sort: { demand: -1 }
       },
       {
        $limit: 1
       }
       ]).pretty()


    /**
     * DONE
     * Same as above with two changes. First this provides a day of week instead of a single date. This means you have
     * to look at all flights on that day of week, not just on an individual date. This is thus covering many more
     * flights. This is also looking for the lowest demand, computed with the same definition as above.
     */
     db.Reservation.aggregate([
       { $match: {
           dayOfWeek: 1
         }
       },
       { $group: {
           _id: "$flight",
           reservations: {
             $push: { _id: "$_id" }
           }
         }
       },
       { $project: {
           flight: "$_id",
           Reservations: {$size: "$reservations"}
         }
       },
       { $lookup: {
           from: "FlightQuery",
           localField: "flight",
           foreignField: "_id",
           as: "flight_info"
         }
       },
       {
        $unwind: "$flight_info"
       },
       { $project: {
          reservations: "$Reservations",
          seats: "$flight_info.seats",
          flight: "$flight"
         }
       },
       { $project: {
           demand: {
              $divide: ["$reservations", "$seats"]
           }
         }
       },
       { $project: {
           demand: {
               $multiply: ["$demand", 100]
           }
         }
       },
       {
        $sort: { demand: 1 }
       },
       {
        $limit: 1
       }
       ]).pretty()

    /**
     * DONE
     * Returns the airport code for the airport with the most available seats on a given date. Once again I have
     * simplified to a single date from a range and are requesting a single airport instead of a city. This may be a
     * different airport than the one with the lowest demand.
     */
     db.Reservation.aggregate([
       { $match: {
           dayOfWeek: 1
         }
       },
       { $group: {
           _id: "$flight",
           reservations: {
             $push: { _id: "$_id" }
           }
         }
       },
       { $project: {
           flight: "$_id",
           Reservations: {$size: "$reservations"}
         }
       },
       { $lookup: {
           from: "FlightQuery",
           localField: "flight",
           foreignField: "_id",
           as: "flight_info"
         }
       },
       {
        $unwind: "$flight_info"
       },
       { $project: {
          reservations: "$Reservations",
          seats: "$flight_info.seats",
          flight: "$flight"
         }
       },
       { $project: {
           availableSeats: {
              $subtract: ["$seats", "$reservations"]
           }
         }
       },
       {
        $sort: { availableSeats: -1 }
       },
       { $limit: 1 }
       ]).pretty()
